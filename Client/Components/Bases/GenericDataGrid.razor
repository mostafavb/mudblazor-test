@using System.Reflection;
@using MiniExcelLibs;
@using MiniExcelLibs.Csv;
@using MiniExcelLibs.OpenXml;
@using MudBlazor.Utilities;
@using Ui.WebAssembly.Components.Controls
@using Ui.WebAssembly.Extensions;
@using Ui.WebAssembly.Models;
@using Ui.WebAssembly.Utilities;
@using System.Linq.Expressions;
@using Ui.WebAssembly.Utils;
@using System.Text.Json;
@using System.Collections.ObjectModel;
@using Severity = MudBlazor.Severity;

@inject IJSRuntime JS
@inject ISnackbar Snackbar

@typeparam T where T: class,IModel,new()



<MudDialog @bind-IsVisible="showFileUploadDialog" Options="@_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.CloudUpload" Class="mr-3" /> Upload a valid file
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudFileUpload T="IBrowserFile" Accept=".xlsx, .csv" OnFilesChanged="@(OnFilesChanged)">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Text"
                           Color="Color.Primary"
                           for="@context">
                    <MudText> Select a file</MudText>
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
        @if (_file is not null)
        {
            <MudText Typo="Typo.caption">
                <MudIcon Icon="@Icons.Material.Filled.AttachFile" Class="mr-3 pt-2" /> @_file.Name , (@(_file.Size / 1024) KB)
            </MudText>
        }
        @if (showProgress)
        {
            <MudItem>
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            </MudItem>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Surface" OnClick="@(()=>{showFileUploadDialog=false;})" Class="px-10">Cancle</MudButton>
        <MudButton Color="Color.Success" OnClick="OnSubmitFileClick" Class="px-10">Submit</MudButton>
    </DialogActions>
</MudDialog>
@if (showProgress)
{
    <MudItem Class="absolute mt-3 ml-5">
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    </MudItem>
}

@* =====>   the id should never change <====== *@

<MudDataGrid id="generic-datagrid" T="T"
             Items="Items"
             ReadOnly="ReadOnly" EditMode="DataGridEditMode"
             FilterMode="@DataGridFilterMode.Simple"
             FixedHeader="@FixedHeader"
             Filterable="@Filterable"
             QuickFilter="@_quickFilter"
             CanceledEditingItem="@OnCanceledEditingItem"
             CommittedItemChanges="@OnCommitedItemChenge"
             Height="740px"
             Virtualize="hasVirtualize"
             EditDialogOptions="@_dialogOptions"
             @ref="grid">

    <ToolBarContent>
        @if (ShowMenue)
        {
            <MudBadge Visible="@(bageCounte>0)" Max="200" Content="@bageCounte" Color="Color.Primary" Overlap="true">
                <MudMenu Icon="@Icons.Material.Filled.MoreVert" Dense="true">
                    <MudMenuItem Icon="@Icons.Material.Filled.Add" OnClick="@OnClickAddItem">
                        <MudText Typo="Typo.caption">Add new item</MudText>
                    </MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.FileUpload" OnClick="@ShowFileUploadDialog">
                        <MudText Typo="Typo.caption"> Import from file</MudText>
                    </MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.FileDownload" OnClick="@OnDownloadClicked">
                        <MudText Typo="Typo.caption"> Export as a file</MudText>
                    </MudMenuItem>
                    @if (ShowCheckDifference)
                    {
                        <MudMenuItem IconColor="@(bageCounte > 0 ? Color.Warning: Color.Surface)" Icon="@Icons.Material.Filled.DataObject" OnClick="@(async (e)=> await CheckDataDifferenceHandler(e))">
                            <MudText Typo="Typo.caption"> Check data changes</MudText>
                        </MudMenuItem>
                    }
                    <MudMenuItem Icon="@Icons.Material.Filled.Save" OnClick="@ApplyChangedData">
                        <MudText Typo="Typo.caption"> Apply changes</MudText>
                    </MudMenuItem>
                </MudMenu>
            </MudBadge>
        }
        <MudText Typo="Typo.h6" Class="ma-3">@HeaderTitle</MudText>
        @if (HasSearchbar)
        {
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="false"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        }
    </ToolBarContent>
    <Columns>
        @if (shouldRender)
        {
            @foreach (var property in _propertyInfos)
            {
                var attributes = property.GetCustomAttribute<DataGridModelAttribute>();
                @*LogAttributes(prop);*@

                @if (TypeIdentifier.IsDateTime(property.PropertyType))
                {
                    <PropertyColumn T="T" TProperty="DateTime?" Property="@(p => (DateTime?)property.GetValue(p))"
                        IsEditable="@(attributes!.IsEditable)"
                        Sortable="@(attributes.IsSortable)"
                        Hidden="@(attributes.IsHiden)"
                        Title="@(string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title)"
                        Filterable="@(attributes.IsFilterable)">

                        <EditTemplate>
                            <MudDatePicker Label="@((isNewFormOpened ) ? (string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title) : string.Empty)"
                               Date="(DateTime?)property.GetValue(context.Item)"
                               DateChanged="@( e=> {                                                   
                                                        DateTime? convertedValue =e is null ? null : e.Value as DateTime?;
                                                        property.SetValue(context.Item,convertedValue);
                                                      
                                                    })"
                               ReadOnly=@(attributes.IsReadOnly)
                               Placeholder="@attributes.Placeholder"
                               Editable="@(attributes!.IsEditable)"
                               DateFormat="@attributes.Format" />
                        </EditTemplate>
                    </PropertyColumn>

                }
                @if (TypeIdentifier.IsNumber(property.PropertyType))
                {
                    if (TypeIdentifier.IsIntegralNumber(property.PropertyType))
                    {
                        <PropertyColumn T="T" TProperty="int?" Property="@(p => (int?)property.GetValue(p))"
                        IsEditable="@(attributes!.IsEditable)"
                        Sortable="@(attributes.IsSortable)"
                        Hidden="@(attributes.IsHiden)"
                        Title="@(string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title)"
                        Filterable="@(attributes.IsFilterable)">
                            <EditTemplate>

                                @if ((ExternalDatas?.Keys.Contains(property.Name) ?? false) && TypeIdentifier.IsEnumerable(attributes.DataType) && (attributes?.DataType == ExternalDatas?[property.Name]?.GetType()))
                                {
                                    <MudSelect T="int?" Dense="true" Value="(int?)property.GetValue(context.Item)" ValueChanged="@( e=> {                                                                   
                                                                         int? convertedValue = e is null ? 0 : e.Value ;
                                                                         property.SetValue(context.Item,convertedValue ?? 0);
                                                                   
                                                                  })">
                                        @foreach (KeyValuePair<int, string> option in ExternalDatas?[property.Name].As<List<KeyValuePair<int, string>>>() ?? new())
                                        {
                                            <MudSelectItem T="int?" Value="@option.Key">@option.Value</MudSelectItem>
                                        }
                                    </MudSelect>
                                }
                                else
                                {
                                    <MudNumericField id="id-numeric"
                                 Label="@((isNewFormOpened ) ? (string.IsNullOrWhiteSpace(attributes!.Title)? property.Name : attributes.Title) : string.Empty)"
                                 T="int?" Value="(int?)property.GetValue(context.Item)"
                                 ValueChanged="@( e=> {                                                                   
                                                            int? convertedValue = e is null ? 0 : e.Value ;
                                                            property.SetValue(context.Item,convertedValue ?? 0);
                                                                   
                                                            })"
                                 Immediate="false"
                                 HideSpinButtons="true"
                                 Placeholder="@attributes.Placeholder"
                                 ReadOnly=@(attributes.IsReadOnly) />
                                }
                            </EditTemplate>
                        </PropertyColumn>
                    }
                    else
                    {
                        <PropertyColumn T="T" TProperty="decimal?" Property="@(p => (decimal?)property.GetValue(p))"
                        IsEditable="@(attributes!.IsEditable)"
                        Sortable="@(attributes.IsSortable)"
                        Hidden="@(attributes.IsHiden)"
                        Title="@(string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title)"
                        Filterable="@(attributes.IsFilterable)">
                            <EditTemplate>
                                <MudNumericField id="id-numeric"
                                 Label="@((isNewFormOpened) ? (string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title) : string.Empty)"
                                 T="decimal?"
                                 Value="(decimal?)property.GetValue(context.Item)"
                                 ValueChanged="@( e=>{
                                                    
                                                        decimal? convertedValue = e is null ? 0.0m: e.Value;
                                                        property.SetValue(context.Item,convertedValue ?? 0.0m);
                                                      
                                                    })"
                                 Immediate="false"
                                 HideSpinButtons="true"
                                 Placeholder="@attributes.Placeholder"
                                 ReadOnly=@(attributes.IsReadOnly) />
                            </EditTemplate>
                        </PropertyColumn>
                    }

                }
                @if (TypeIdentifier.IsString(property.PropertyType))
                {
                    <PropertyColumn T="T" TProperty="string" Property="@(p => (string?)property.GetValue(p))"
                        IsEditable="@(attributes!.IsEditable)"
                        Sortable="@(attributes.IsSortable)"
                        Hidden="@(attributes.IsHiden)"
                        Title="@(string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title)"
                        Filterable="@(attributes.IsFilterable)">
                        <EditTemplate>
                            @if ((ExternalDatas?.Keys.Contains(property.Name) ?? false) && TypeIdentifier.IsEnumerable(attributes.DataType) && (attributes?.DataType == ExternalDatas?[property.Name]?.GetType()))
                            {
                                <MudSelect T="string" Dense="true" Value="(string?)property.GetValue(context.Item)"
                           ValueChanged="@( e=>{
                                                               
                                                                    string? convertedValue = e;
                                                                    property.SetValue(context.Item,convertedValue);
                                                               
                                                            })">
                                    @foreach (KeyValuePair<string, string> option in ExternalDatas?[property.Name].As<List<KeyValuePair<string, string>>>() ?? new())
                                    {
                                        <MudSelectItem T="string" Value="@option.Key">@option.Value</MudSelectItem>
                                    }
                                </MudSelect>
                            }
                            else
                            {
                                <MudTextField T="string"
                              Label="@((isNewFormOpened) ? (string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title) : string.Empty)"
                              ReadOnly="@attributes.IsReadOnly"
                              Placeholder="@attributes.Placeholder"
                              Value="(string?)property.GetValue(context.Item)"
                              Immediate="false"
                              ValueChanged="@( e=>{
                                                        
                                                                string? convertedValue = e;
                                                                property.SetValue(context.Item,convertedValue);
                                                          
                                                            })">
                                </MudTextField>
                            }
                        </EditTemplate>
                    </PropertyColumn>
                }
                @if (TypeIdentifier.IsBoolean(property.PropertyType))
                {
                    <PropertyColumn T="T" TProperty="bool?" Property="@(p => (bool?)property.GetValue(p))"
                        IsEditable="@(attributes!.IsEditable)"
                        Sortable="@(attributes.IsSortable)"
                        Hidden="@(attributes.IsHiden)"
                        Title="@(string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title)"
                        Filterable="@(attributes.IsFilterable)">
                        <EditTemplate>
                            <MudCheckBox Class="mud-switch-showlable" Label="@((isNewFormOpened) ? (string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title) : string.Empty)"
                             ReadOnly=@(attributes.IsReadOnly) T="bool?"
                             Checked="((bool?)property.GetValue(context.Item))"
                             CheckedChanged="@( e=>{
                                                        
                                                            bool? convertedValue = (bool?)e.Value;
                                                            property.SetValue(context.Item,convertedValue);
                                                 
                                                })" />
                        </EditTemplate>
                    </PropertyColumn>
                }
            }

            <TemplateColumn Sortable="false" Filterable="false" IsEditable="false" StickyRight="@(ShowEditRowButton||ShowDeleteRowButton)">
                <CellTemplate>
                    @if (ShowEditRowButton)
                    {
                        <span Class="d-inline-flex">
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                        </span>
                    }
                    @if (ShowDeleteRowButton)
                    {
                        <span Class="d-inline-flex">
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(async ()=>await OnDeleteRowClick(context.Item))" />
                        </span>
                    }

                </CellTemplate>
            </TemplateColumn>
        }
    </Columns>
</MudDataGrid>


@code {

    #region Parameters

    [Parameter]
    [EditorRequired]
    public IList<T> Items { get; set; }

    [Parameter] public bool ReadOnly { get; set; } = false;

    [Parameter] public DataGridEditMode DataGridEditMode { get; set; } = DataGridEditMode.Cell;

    [Parameter] public bool HasSearchbar { get; set; } = false;

    [Parameter] public bool Filterable { get; set; } = false;

    [Parameter] public string HeaderTitle { get; set; } = string.Empty;

    [Parameter] public Func<Task<IList<T>?>>? GetDifferences { get; set; }

    [Parameter] public EventCallback<IList<T>> OnDataChanged { get; set; }

    [Parameter] public EventCallback OnApplyChangedData { get; set; }

    [Parameter] public bool ShowDeleteRowButton { get; set; } = false;

    [Parameter] public bool ShowEditRowButton { get; set; } = false;

    [Parameter] public bool FixedHeader { get; set; } = false;

    [Parameter] public bool ShowMenue { get; set; } = true;

    [Parameter] public bool ShowCheckDifference { get; set; } = false;

    [Parameter] public bool ShowHiddenItemsInDownloadFile { get; set; } = false;

    [Parameter] public ExcelType DownloadFileType { get; set; } = ExcelType.XLSX;

    [Parameter] public Dictionary<string, object?>? ExternalDatas { get; set; } = null;
    #endregion


    // Properties


    #region Fields

    string? _searchString;
    bool isNewFormOpened;
    int bageCounte;
    bool showFileUploadDialog = false;
    bool showProgress = true;
    bool hasVirtualize = false;
    bool shouldRender = true;

    DialogOptions _dialogOptions = new DialogOptions { CloseButton = false, DisableBackdropClick = true };

    IBrowserFile? _file;
    IJSObjectReference? module;

    MudDataGrid<T> grid;
    List<PropertyInfo> _propertyInfos;
    #endregion


    #region Events

    protected override async Task OnParametersSetAsync()
    {
        if (Items is not null && Items.Count > 0)
        {
            _propertyInfos = (GetPropertyInfos(Items.First())
                                .Where(w => !w.GetCustomAttribute<DataGridModelAttribute>()!.IsHiden) ?? Enumerable.Empty<PropertyInfo>())
                                .ToList();
            hasVirtualize = Items.Count > 100;
            //LogTypeAttributes();

        }
        await Task.CompletedTask;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("activeFocus");
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            shouldRender = false;
            showProgress = false;
            StateHasChanged();
        }
    }



    /// <summary>
    /// triggers the OnApplyChangedData event
    /// </summary>
    /// <returns></returns>
    async Task ApplyChangedData()
    {
        await OnApplyChangedData.InvokeAsync();
    }


    /// <summary>
    /// upload the file
    /// </summary>
    /// <param name="file"></param>
    /// <returns></returns>
    async Task OnFilesChanged(InputFileChangeEventArgs file)
    {
        await InvokeAsync(() => _file = file.File);
    }

    /// <summary>
    /// when click commits on download in the menue this method triggers
    /// </summary>
    /// <returns></returns>
    async Task OnDownloadClicked()
    {
        await InvokeAsync(() => DownloadFile());
    }

    /// <summary>
    /// this method calls when delete event commits
    /// </summary>
    /// <param name="item"></param>
    async Task OnDeleteRowClick(T item)
    {
        await InvokeAsync(() =>
        {
            Items.Remove(item);
            bageCounte++;
        });
    }

    /// <summary>
    /// when add new item calls then this method triggers
    /// </summary>
    /// <returns></returns>
    async void OnClickAddItem()
    {
        await AddNewItem();
    }

    /// <summary>
    /// commit the add event, it adds a new item of type T
    /// </summary>
    /// <param name="item"></param>
    async Task OnCommitedItemChenge(T item)
    {
        await InvokeAsync(() =>
        {
            Items.Add(item);
            isNewFormOpened = false;
            bageCounte++;
        });

    }

    /// <summary>
    /// commit the canceled event on new item dilog
    /// </summary>
    /// <param name="item"></param>
    async void OnCanceledEditingItem(T item)
    {
        isNewFormOpened = false;
        //await CheckDataDifferenceHandler();
    }


    /// <summary>
    /// this method calls the deleget method 'GetDifferences()' and check changes in the grid data source
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    async Task CheckDataDifferenceHandler(MouseEventArgs e = null)
    {
        await InvokeAsync(async () =>
           {
               showProgress = true;
               var diffs = await GetDifferences() ?? Enumerable.Empty<T>();
               bageCounte = diffs?.Count() ?? 0;
               showProgress = false;
           });

    }


    /// <summary>
    /// commit inline changes for every inputs that has IsEditable attribute
    /// </summary>
    /// <param name="item"></param>
    async Task CommittedItemChangesHandler(T item)
    {
        await InvokeAsync(() =>
          {
              bageCounte++;
          });
    }
    #endregion


    #region Methods

    /// <summary>
    /// upload the file and set grid data source by new data. if process fails then nothing will happen.
    /// acceptable files extension: .csv, .xlsx
    /// </summary>
    /// <param name="file"></param>
    /// <returns></returns>
    async Task<bool> FileUpload()
    {
        try
        {

            long maxFileSizeKB = 1024 * 1024 * 100;  // file size is in MB
            if (_file?.Size > maxFileSizeKB)
            {
                Snackbar.Add($"File size exceeds the maximum allowed limit.<br><strong>The maximum file size is {maxFileSizeKB / 1024 * 1024} MB</strong>", Severity.Info);
                return false;
            }

            using var stream = _file?.OpenReadStream();
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);

            var extension = Path.GetExtension(_file?.Name);

            var uploadedItems = await ms.QueryAsync<T>(excelType: extension.ToLower().Contains("csv") ? ExcelType.CSV : ExcelType.XLSX);

            if (uploadedItems is not null && uploadedItems.Count() > 0)
            {
                await OnDataChanged.InvokeAsync(uploadedItems.ToList());
                await CheckDataDifferenceHandler();
                //bageCounte = uploadedItems.Count();
                //Items = uploadItems.ToList();
            }
            else
            {

                Snackbar.Add($"Invalid file type. Please select a valid file.", Severity.Info);
                return false;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: <strong>{ex.Message}</strong><br>The uploading process failed, check your file content and try again.", Severity.Warning);
            return false;
        }
        return true;
    }




    /// <summary>
    /// creat a file from the grid data source, file's extension sets as input parameter. default extension is .xlsx
    /// </summary>
    /// <returns></returns>
    async Task DownloadFile()
    {
        showProgress = true;
        using var memoryStream = new MemoryStream();

        var fileName = (string.IsNullOrWhiteSpace(HeaderTitle) ?
                                        nameof(T).ToLower().Replace("dto", "") :
                                        HeaderTitle
                                ) + $".{DownloadFileType.ToString().ToLower()}";

        var items = Items;

        if (!ShowHiddenItemsInDownloadFile)
        {
            var properties = _propertyInfos?.Where(p =>
                                        {
                                            var attributes = p.GetCustomAttribute<DataGridModelAttribute>();
                                            return attributes is not null && !attributes.IsHiden;
                                        });

            items = Items.Select(s =>
            {
                var instance = Activator.CreateInstance<T>();
                foreach (var property in properties)
                    property.SetValue(instance, property.GetValue(s), null);
                return instance;

            }).ToList();

        }

        //Configuration config = DownloadFileType switch
        //{
        //    ExcelType.CSV => new CsvConfiguration { Culture = new System.Globalization.CultureInfo("en-CA") },
        //    ExcelType.XLSX => new OpenXmlConfiguration { Culture = new System.Globalization.CultureInfo("en-CA") },
        //    _ => throw new ArgumentOutOfRangeException(nameof(DownloadFileType), $"Not expected direction value: {DownloadFileType}")
        //};

        await memoryStream.SaveAsAsync(items, excelType: DownloadFileType);
        memoryStream.Seek(0, SeekOrigin.Begin);
        using var streamRef = new DotNetStreamReference(stream: memoryStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        showProgress = false;
    }

    /// <summary>
    /// open a dialog and generate inputs based on the type of T and its attributes.
    /// </summary>
    /// <returns></returns>
    async Task AddNewItem()
    {
        await InvokeAsync(async () =>
        {
            var item = (T)Activator.CreateInstance(typeof(T))!;

            if (item is not null)
            {
                isNewFormOpened = true;
                //if (module is not null)
                //    await module.InvokeVoidAsync("observeAutoGeneratedDiv", DotNetObjectReference.Create(this), "HandleAutoGeneratedDiv");
                await grid.SetEditingItemAsync(item);
            }
        });
    }

    /// <summary>
    /// make a deleget method for those properties have IsFilterable attribute.
    /// </summary>
    Func<T, bool> _quickFilter => x =>
    {
        if (_propertyInfos is null)
            return false;

        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return _propertyInfos?.Where(p =>
                                        {
                                            var attributes = p.GetCustomAttribute<DataGridModelAttribute>();
                                            return attributes is not null && (attributes.IsFilterable && !attributes.IsHiden);
                                        })
                                        .Any(property => ($"{property.GetValue(x)}".Contains(_searchString, StringComparison.OrdinalIgnoreCase))) ?? false;

    };


    /// <summary>
    /// opens the File upload dialog
    /// </summary>
    void ShowFileUploadDialog()
    {
        _file = null;
        showFileUploadDialog = true;
    }

    /// <summary>
    /// submit uploaded file
    /// </summary>
    async Task OnSubmitFileClick()
    {
        await InvokeAsync(async () =>
        {
            if (_file is not null)
            {
                showProgress = true;
                if (await FileUpload())
                {
                    //if (!hasVirtualize)
                    //    await CheckDataDifferenceHandler();
                    //else
                    //    bageCounte++;
                }
                showFileUploadDialog = false;
                showProgress = false;
            }
            else
            {
                Snackbar.Add($"No file selected.", Severity.Info);
            }
        });
    }

    /// <summary>
    /// this method invokes from javascript and will define dialog state.
    /// </summary>
    /// <param name="returned"></param>
    /// <returns></returns>
    [Obsolete("no need to this method, it implements by css", false)]
    [JSInvokable]
    public Task HandleAutoGeneratedDiv(bool returned)
    {
        isNewFormOpened = returned;
        StateHasChanged();
        return Task.CompletedTask;
    }

    /// <summary>
    /// return a list of PropertyInfo for all properties in a type of T
    /// </summary>
    /// <param name="item"></param>
    /// <returns>List<PropertyInfo></returns>
    private List<PropertyInfo> GetPropertyInfos(T item) =>
        item
            .GetType()
            .GetProperties()
            .ToList();


    /// <summary>
    /// Log some information about the attributes of a property
    /// </summary>
    void LogTypeAttributes()
    {
        foreach (var prop in _propertyInfos!)
        {
            var itemName = prop.Name;
            Console.WriteLine($"itemName: {itemName}");

            bool isReadOnly = prop.GetAttributeValue<bool>("IsReadOnly");
            Console.WriteLine($"\tIsReadOnly: {isReadOnly}");

            bool isHiden = prop.GetAttributeValue<bool>("IsHiden");
            Console.WriteLine($"\tIsHiden: {isHiden}");

            bool isEditable = prop.GetAttributeValue<bool>("IsEditable");
            Console.WriteLine($"\tIsEditable: {isEditable}");

            bool isFilterable = prop.GetAttributeValue<bool>("IsFilterable");
            Console.WriteLine($"\tIsFilterable: {isFilterable}");

            bool isSortable = prop.GetAttributeValue<bool>("IsSortable");
            Console.WriteLine($"\tIsSortable: {isSortable}");

            string title = prop.GetAttributeValue<string>("Title") ?? string.Empty;
            Console.WriteLine($"\tTitle: {title}");

            string placeholder = prop.GetAttributeValue<string>("Placeholder") ?? string.Empty;
            Console.WriteLine($"\tPlaceholder: {placeholder}");

            string format = prop.GetAttributeValue<string>("Format") ?? string.Empty;
            Console.WriteLine($"\tFormat: {format}");

            string context = prop.GetAttributeValue<string>("Context") ?? string.Empty;
            Console.WriteLine($"\tContext: {context}");

            string cellClass = prop.GetAttributeValue<string>("CellClass") ?? string.Empty;
            Console.WriteLine($"\tCellClass: {cellClass}");

            string cellStyle = prop.GetAttributeValue<string>("CellStyle") ?? string.Empty;
            Console.WriteLine($"\tCellStyle: {cellStyle}");

            string class_ = prop.GetAttributeValue<string>("Class") ?? string.Empty;
            Console.WriteLine($"\tClass: {class_}");


        }
    }

    void LogAttributes(PropertyInfo prop)
    {
        var attributes = prop.GetCustomAttribute<DataGridModelAttribute>();

        Console.WriteLine($"item: Name: {prop.Name}");
        Console.WriteLine($"\tType: {prop.PropertyType}");
        Console.WriteLine($"\tValue: {prop.GetValue(Items.First())}");

        bool isDatetime = prop.PropertyType == typeof(DateTime?);
        Console.WriteLine($"\tIsDatetime: {isDatetime}");
        Console.WriteLine($"\tIsEditable: {attributes.IsEditable}");
        Console.WriteLine($"\tIsSortable: {attributes.IsSortable}");
        Console.WriteLine($"\tIsHiden: {attributes.IsHiden}");
        Console.WriteLine($"\tIsFilterable: {attributes.IsFilterable}");
        Console.WriteLine($"----------------------------------");
    }

    #endregion
}

<style>
    #generic-datagrid label {
        display: none;
    }
</style>
<style>
    .mud-switch-showlable label {
        display: inline-flex !important;
    }
</style>