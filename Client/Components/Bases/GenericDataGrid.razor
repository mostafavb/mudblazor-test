@using System.Reflection;
@using MudBlazor.Utilities;
@using MudBlazorTemplates1.WebAssembly.Extensions;
@using MudBlazorTemplates1.WebAssembly.Utilities;
@using System.Linq.Expressions;
@using MudBlazorTemplates1.WebAssembly.Utils;
@using System.Text.Json;
@using System.Collections.ObjectModel;
@inject IJSRuntime JSRuntime

@typeparam T

@* ===> the id should never change *@

<MudPaper id="genericpaper">
    <MudDataGrid id="generic-datagrid" T="T"
                 Items="Items"
                 ReadOnly="ReadOnly" EditMode="DataGridEditMode"
                 FilterMode="@DataGridFilterMode.Simple"
                 FixedHeader="@FixedHeader"
                 Filterable="@Filterable"
                 QuickFilter="@_quickFilter"
                 StartedEditingItem="@OnStartEditingItem"
                 EditDialogOptions="@dialogOptions"
                 CanceledEditingItem="@OnCanceledEditingItem"
                 CommittedItemChanges="@OnCommitedItemChenge"
                 @ref="grid">

        <ToolBarContent>
            <MudBadge Visible="@(bageCounte>0)" Content="@bageCounte" Color="Color.Warning" Overlap="true">
                <MudMenu Icon="@Icons.Material.Filled.Dehaze">
                    <MudMenuItem Icon="@Icons.Material.Filled.Add" OnClick="@AddNewItem">
                        <MudText Typo="Typo.caption">Add new item</MudText>
                    </MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.FileUpload">
                        <MudText Typo="Typo.caption">Import from file</MudText>
                    </MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.FileDownload">
                        <MudText Typo="Typo.caption"> Download file</MudText>
                    </MudMenuItem>
                    <MudMenuItem IconColor="@(bageCounte > 0 ? Color.Warning: Color.Surface)" Icon="@Icons.Material.Filled.DataObject" OnClick="@((e)=> OnCheckDataDifferenceHandler(e))">
                        <MudText Typo="Typo.caption"> Check data changes</MudText>
                    </MudMenuItem>
                </MudMenu>
            </MudBadge>
            <MudText Typo="Typo.h6" Class="ma-3">@HeaderTitle</MudText>
            @if (HasSearchbar)
            {
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            }
        </ToolBarContent>
        <Columns>
            @if (_propertyInfos is not null)
            {
                foreach (var property in _propertyInfos.Where(w => !w.GetCustomAttribute<DataGridModelAttribute>()!.IsHiden))
                {
                    var attributes = property.GetCustomAttribute<DataGridModelAttribute>();
                    @*LogAttributes(prop);*@

                    @if (TypeIdentifier.IsDateTime(property.PropertyType))
                    {
                        <PropertyColumn T="T" TProperty="DateTime?" Property="@(p => (DateTime?)property.GetValue(p))"
                            IsEditable="@(attributes!.IsEditable)"
                            Sortable="@(attributes.IsSortable)"
                            Hidden="@(attributes.IsHiden)"
                            Title="@(string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title)"
                            Filterable="@(attributes.IsFilterable)">

                            <EditTemplate>
                                <MudDatePicker Label="@((isNewFormOpened ) ? (string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title) : string.Empty)"
                                   Date="(DateTime?)property.GetValue(context.Item)"
                                   DateChanged="@(e=> {
                                                        DateTime? convertedValue =e is null ? null : e.Value as DateTime?;
                                                        property.SetValue(context.Item,convertedValue);
                                                        CommittedItemChangesHandler(context.Item);
                                                    })"
                                   ReadOnly=@(attributes.IsReadOnly)
                                   Placeholder="@attributes.Placeholder"
                                   Editable="@(attributes!.IsEditable)"
                                   DateFormat="@attributes.Format" />
                            </EditTemplate>
                        </PropertyColumn>

                    }
                    @if (TypeIdentifier.IsNumber(property.PropertyType))
                    {
                        if (TypeIdentifier.IsIntegralNumberype(property.PropertyType))
                        {
                            <PropertyColumn T="T" TProperty="int?" Property="@(p => (int?)property.GetValue(p))"
                            IsEditable="@(attributes!.IsEditable)"
                            Sortable="@(attributes.IsSortable)"
                            Hidden="@(attributes.IsHiden)"
                            Title="@(string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title)"
                            Filterable="@(attributes.IsFilterable)">
                                <EditTemplate>
                                    <MudNumericField id="id-numeric"
                                     Label="@((isNewFormOpened ) ? (string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title) : string.Empty)"
                                     T="int?" Value="(int?)property.GetValue(context.Item)"
                                     ValueChanged="@(e=> {
                                                         int? convertedValue = e is null ? 0 : e.Value ;
                                                         property.SetValue(context.Item,convertedValue ?? 0);
                                                         CommittedItemChangesHandler(context.Item);
                                                      })"
                                     IconSize="Size.Small"
                                     Immediate="false"
                                     Placeholder="@attributes.Placeholder"
                                     ReadOnly=@(attributes.IsReadOnly) />
                                </EditTemplate>
                            </PropertyColumn>
                        }
                        else
                        {
                            <PropertyColumn T="T" TProperty="decimal?" Property="@(p => (decimal?)property.GetValue(p))"
                            IsEditable="@(attributes!.IsEditable)"
                            Sortable="@(attributes.IsSortable)"
                            Hidden="@(attributes.IsHiden)"
                            Title="@(string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title)"
                            Filterable="@(attributes.IsFilterable)">
                                <EditTemplate>
                                    <MudNumericField id="id-numeric"
                                     Label="@((isNewFormOpened) ? (string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title) : string.Empty)"
                                     T="decimal?"
                                     Value="(decimal?)property.GetValue(context.Item)"
                                     ValueChanged="@(e=>{
                                                    decimal? convertedValue = e is null ? 0.0m: e.Value;
                                                    property.SetValue(context.Item,convertedValue ?? 0.0m);
                                                    CommittedItemChangesHandler(context.Item);
                                                    })"
                                     Placeholder="@attributes.Placeholder"
                                     Immediate="false"
                                     ReadOnly=@(attributes.IsReadOnly) />
                                </EditTemplate>
                            </PropertyColumn>
                        }

                    }
                    @if (TypeIdentifier.IsString(property.PropertyType))
                    {
                        <PropertyColumn T="T" TProperty="string" Property="@(p => (string?)property.GetValue(p))"
                            IsEditable="@(attributes!.IsEditable)"
                            Sortable="@(attributes.IsSortable)"
                            Hidden="@(attributes.IsHiden)"
                            Title="@(string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title)"
                            Filterable="@(attributes.IsFilterable)">
                            <EditTemplate>
                                <MudTextField T="string"
                                  Label="@((isNewFormOpened) ? (string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title) : string.Empty)"
                                  ReadOnly=@(attributes.IsReadOnly)
                                  Placeholder="@attributes.Placeholder"
                                  Value="(string?)property.GetValue(context.Item)"
                                  Immediate="false"
                                  ValueChanged="@(e=>{
                                                    string? convertedValue = e;
                                                    property.SetValue(context.Item,convertedValue);
                                                    CommittedItemChangesHandler(context.Item);
                                                })">
                                </MudTextField>
                            </EditTemplate>
                        </PropertyColumn>
                    }
                    @if (TypeIdentifier.IsBoolean(property.PropertyType))
                    {
                        <PropertyColumn T="T" TProperty="bool?" Property="@(p => (bool?)property.GetValue(p))"
                            IsEditable="@(attributes!.IsEditable)"
                            Sortable="@(attributes.IsSortable)"
                            Hidden="@(attributes.IsHiden)"
                            Title="@(string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title)"
                            Filterable="@(attributes.IsFilterable)">
                            <EditTemplate>
                                <MudSwitch Label="@((isNewFormOpened) ? (string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title) : string.Empty)"
                               ReadOnly=@(attributes.IsReadOnly) T="bool?"
                               Checked="((bool?)property.GetValue(context.Item))"
                               CheckedChanged="@(e=>{
                                                    bool? convertedValue = (bool?)e.Value;
                                                    property.SetValue(context.Item,convertedValue);
                                                    CommittedItemChangesHandler(context.Item);
                                                })" />
                            </EditTemplate>
                        </PropertyColumn>
                    }
                }

                <TemplateColumn Sortable="false" Filterable="false" IsEditable="false">
                    <CellTemplate>
                        @if (ShowEditRowButton)
                        {
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                        }
                        @if (ShowDeleteRowButton)
                        {
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(()=>DeleteRowClickHandler(context.Item))" />
                        }

                    </CellTemplate>
                </TemplateColumn>
            }

        </Columns>
    </MudDataGrid>
</MudPaper>

@code {

    // Parameters

    [Parameter]
    [EditorRequired]
    public required IList<T> Items { get; set; }

    [Parameter] public bool ReadOnly { get; set; } = false;

    [Parameter] public DataGridEditMode DataGridEditMode { get; set; } = DataGridEditMode.Cell;

    [Parameter] public bool HasSearchbar { get; set; } = false;

    [Parameter] public bool Filterable { get; set; } = false;

    [Parameter] public string HeaderTitle { get; set; } = string.Empty;

    [Parameter] public Func<IList<T>?> GetDifferences { get; set; }

    [Parameter] public bool ShowDeleteRowButton { get; set; } = false;

    [Parameter] public bool ShowEditRowButton { get; set; } = false;

    [Parameter] public bool FixedHeader { get; set; } = false;

    // Properties
    public IList<T> RemovedItems { get; set; } = new List<T>();
    // Fields

    string? _searchString;
    bool isNewFormOpened;
    int bageCounte;
    IJSObjectReference? module;

    MudDataGrid<T> grid;
    List<PropertyInfo>? _propertyInfos;
    DialogOptions dialogOptions = new DialogOptions { CloseButton = false, DisableBackdropClick = true, CloseOnEscapeKey = false };

    // Events

    protected override async Task OnParametersSetAsync()
    {
        if (Items is not null && Items.Count > 0)
        {
            _propertyInfos = GetPropertyInfos(Items.First());

            //LogTypeAttributes();

        }
        await Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/GenericDataGrid.js");
        }
    }

    [JSInvokable]
    public Task HandleAutoGeneratedDiv(bool returned)
    {
        isNewFormOpened = returned;
        StateHasChanged();
        return Task.CompletedTask;
    }


    Task OnCheckDataDifferenceHandler(MouseEventArgs e)
    {
        var diffs = GetDifferences();
        bageCounte = diffs?.Count ?? 0;

        return Task.CompletedTask;
    }

    void CommittedItemChangesHandler(T item)
    {
        if (!isNewFormOpened)
        {
            bageCounte++;
        }
        //Console.WriteLine($"{System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void DeleteRowClickHandler(T item)
    {
        Items.Remove(item);
        RemovedItems.Add(item);
        bageCounte = bageCounte > 0 ? bageCounte - 1 : 0;
    }

    async Task AddNewItem()
    {
        var item = (T)Activator.CreateInstance(typeof(T))!;

        if (item is not null)
        {
            isNewFormOpened = true;
            //if (module is not null)
            //    await module.InvokeVoidAsync("observeAutoGeneratedDiv", DotNetObjectReference.Create(this), "HandleAutoGeneratedDiv");
            await grid.SetEditingItemAsync(item);

        }
        await Task.CompletedTask;
    }

    void OnStartEditingItem(T item)
    {

    }

    void OnCommitedItemChenge(T item)
    {
        Items.Add(item);
        bageCounte++;
        isNewFormOpened = false;
    }

    void OnCanceledEditingItem(T item)
    {
        isNewFormOpened = false;
    }

    //Methods

    Func<T, bool> _quickFilter => x =>
    {
        if (_propertyInfos is null)
            return false;

        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return _propertyInfos?.Where(p =>
                                        {
                                            var attributes = p.GetCustomAttribute<DataGridModelAttribute>();
                                            return attributes is not null && (attributes.IsFilterable && !attributes.IsHiden);
                                        })
                                        .Any(property => ($"{property.GetValue(x)}".Contains(_searchString, StringComparison.OrdinalIgnoreCase))) ?? false;

    };


    private List<PropertyInfo> GetPropertyInfos(T item) =>
        item
            .GetType()
            .GetProperties()
            .ToList();

    void LogTypeAttributes()
    {
        foreach (var prop in _propertyInfos!)
        {
            var itemName = prop.Name;
            Console.WriteLine($"itemName: {itemName}");

            bool isReadOnly = prop.GetAttributeValue<bool>("IsReadOnly");
            Console.WriteLine($"\tIsReadOnly: {isReadOnly}");

            bool isHiden = prop.GetAttributeValue<bool>("IsHiden");
            Console.WriteLine($"\tIsHiden: {isHiden}");

            bool isEditable = prop.GetAttributeValue<bool>("IsEditable");
            Console.WriteLine($"\tIsEditable: {isEditable}");

            bool isFilterable = prop.GetAttributeValue<bool>("IsFilterable");
            Console.WriteLine($"\tIsFilterable: {isFilterable}");

            bool isSortable = prop.GetAttributeValue<bool>("IsSortable");
            Console.WriteLine($"\tIsSortable: {isSortable}");

            string title = prop.GetAttributeValue<string>("Title") ?? string.Empty;
            Console.WriteLine($"\tTitle: {title}");

            string placeholder = prop.GetAttributeValue<string>("Placeholder") ?? string.Empty;
            Console.WriteLine($"\tPlaceholder: {placeholder}");

            string format = prop.GetAttributeValue<string>("Format") ?? string.Empty;
            Console.WriteLine($"\tFormat: {format}");

            string context = prop.GetAttributeValue<string>("Context") ?? string.Empty;
            Console.WriteLine($"\tContext: {context}");

            string cellClass = prop.GetAttributeValue<string>("CellClass") ?? string.Empty;
            Console.WriteLine($"\tCellClass: {cellClass}");

            string cellStyle = prop.GetAttributeValue<string>("CellStyle") ?? string.Empty;
            Console.WriteLine($"\tCellStyle: {cellStyle}");

            string class_ = prop.GetAttributeValue<string>("Class") ?? string.Empty;
            Console.WriteLine($"\tClass: {class_}");


        }
    }

    void LogAttributes(PropertyInfo prop)
    {
        var attributes = prop.GetCustomAttribute<DataGridModelAttribute>();

        Console.WriteLine($"item: Name: {prop.Name}");
        Console.WriteLine($"\tType: {prop.PropertyType}");
        Console.WriteLine($"\tValue: {prop.GetValue(Items.First())}");

        bool isDatetime = prop.PropertyType == typeof(DateTime?);
        Console.WriteLine($"\tIsDatetime: {isDatetime}");
        Console.WriteLine($"\tIsEditable: {attributes.IsEditable}");
        Console.WriteLine($"\tIsSortable: {attributes.IsSortable}");
        Console.WriteLine($"\tIsHiden: {attributes.IsHiden}");
        Console.WriteLine($"\tIsFilterable: {attributes.IsFilterable}");
        Console.WriteLine($"----------------------------------");
    }
}

<style>
    #generic-datagrid label {
        display: none;
    }
</style>