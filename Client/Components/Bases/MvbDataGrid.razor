@using MudBlazor.Utilities;
@using MudBlazorTemplates1.WebAssembly.Utilities;
@using System.Reflection;
@inherits MudDataGrid<T>
@typeparam T
@inject IJSRuntime JSRuntime

<MudDataGrid id="generic-datagrid" T="T" Items="Items"
             ReadOnly="ReadOnly" EditMode="DataGridEditMode"
             FilterMode="@DataGridFilterMode.Simple"
             FixedHeader="@FixedHeader"
             Filterable="@Filterable"
             QuickFilter="@_quickFilter"
             StartedEditingItem="@OnStartEditingItem"
             CommittedItemChanges="@OnCommitedItemChenge"
             CanceledEditingItem="@OnCanceledEditingItem"
             EditDialogOptions="@dialogOptions"
             @ref="grid">

    <ToolBarContent>
        <MudText Typo="Typo.h6">@HeaderTitle</MudText>
        <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Filled.Add" OnClick="@(AddNewItem)" />
        <MudSpacer />
        @if (dataChanged)
        {
            <MudAlert Severity="Severity.Warning" NoIcon="true" Class="my-2">Data has been changed.</MudAlert>
            <MudSpacer />
            <MudButton Variant="Variant.Text" OnClick="@((e)=> OnCheckDataDifferenceHandler(e))" Color="Color.Warning">Check for Changes</MudButton>
        }
        <MudDivider DividerType="DividerType.Inset" />
        @if (HasSearchbar)
        {
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        }
    </ToolBarContent>
    <Columns>
        @if (_propertyInfos is not null)
        {
            foreach (var property in _propertyInfos.Where(w => !w.GetCustomAttribute<DataGridModelAttribute>()!.IsHiden))
            {
                var attributes = property.GetCustomAttribute<DataGridModelAttribute>();
                @*LogAttributes(prop);*@

                @if (TypeIdentifier.IsDateTime(property.PropertyType))
                {
                    <PropertyColumn T="T" TProperty="DateTime?" Property="@(p => (DateTime?)property.GetValue(p))"
                        IsEditable="@(attributes!.IsEditable)"
                        Sortable="@(attributes.IsSortable)"
                        Hidden="@(attributes.IsHiden)"
                        Title="@(string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title)"
                        Filterable="@(attributes.IsFilterable)">

                        <EditTemplate>
                            <MudDatePicker Label="@(isEditFormOpened ? (string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title) : string.Empty)"
                               Date="(DateTime?)property.GetValue(context.Item)"
                               DateChanged="@(e=> {
                                                        DateTime? convertedValue =e is null ? null : e.Value as DateTime?;
                                                        property.SetValue(context.Item,convertedValue);
                                                        CommittedItemChangesHandler(context.Item);
                                                    })"
                               ReadOnly=@(attributes.IsReadOnly)
                               Placeholder="@attributes.Placeholder"
                               Editable="@(attributes!.IsEditable)"
                               DateFormat="@attributes.Format" />
                        </EditTemplate>
                    </PropertyColumn>

                }
                @if (TypeIdentifier.IsNumber(property.PropertyType))
                {

                    if (TypeIdentifier.IsIntegralNumberype(property.PropertyType))
                    {
                        <PropertyColumn T="T" TProperty="int?" Property="@(p => (int?)property.GetValue(p))"
                        IsEditable="@(attributes!.IsEditable)"
                        Sortable="@(attributes.IsSortable)"
                        Hidden="@(attributes.IsHiden)"
                        Title="@(string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title)"
                        Filterable="@(attributes.IsFilterable)">
                            <EditTemplate>
                                <MudNumericField id="id-numeric" Label="@(isEditFormOpened ? (string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title) : string.Empty)"
                                 T="int?" Value="(int?)property.GetValue(context.Item)"
                                 ValueChanged="@(e=> {
                                                         int? convertedValue = e is null ? 0 : e.Value ;
                                                         property.SetValue(context.Item,convertedValue ?? 0);
                                                         CommittedItemChangesHandler(context.Item);
                                                      })"
                                 IconSize="Size.Small"
                                 Immediate="true"
                                 Placeholder="@attributes.Placeholder"
                                 ReadOnly=@(attributes.IsReadOnly) />
                            </EditTemplate>
                        </PropertyColumn>
                    }
                    else
                    {
                        <PropertyColumn T="T" TProperty="decimal?" Property="@(p => (decimal?)property.GetValue(p))"
                        IsEditable="@(attributes!.IsEditable)"
                        Sortable="@(attributes.IsSortable)"
                        Hidden="@(attributes.IsHiden)"
                        Title="@(string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title)"
                        Filterable="@(attributes.IsFilterable)">
                            <EditTemplate>
                                <MudNumericField id="id-numeric" Label="@(isEditFormOpened ? (string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title) : string.Empty)"
                                 T="decimal?"
                                 Immediate="true"
                                 Value="(decimal?)property.GetValue(context.Item)"
                                 ValueChanged="@(e=>{
                                                    decimal? convertedValue = e is null ? 0.0m: e.Value;
                                                    property.SetValue(context.Item,convertedValue ?? 0.0m);
                                                    CommittedItemChangesHandler(context.Item);
                                                    })"
                                 Placeholder="@attributes.Placeholder"
                                 ReadOnly=@(attributes.IsReadOnly) />
                            </EditTemplate>
                        </PropertyColumn>
                    }

                }
                @if (TypeIdentifier.IsString(property.PropertyType))
                {
                    <PropertyColumn T="T" TProperty="string" Property="@(p => (string?)property.GetValue(p))"
                        IsEditable="@(attributes!.IsEditable)"
                        Sortable="@(attributes.IsSortable)"
                        Hidden="@(attributes.IsHiden)"
                        Title="@(string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title)"
                        Filterable="@(attributes.IsFilterable)">
                        <EditTemplate>
                            <MudTextField T="string" Label="@((isEditFormOpened && !editFinished) ? (string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title) : string.Empty)"
                              ReadOnly=@(attributes.IsReadOnly)
                              Placeholder="@attributes.Placeholder"
                              Value="(string?)property.GetValue(context.Item)"
                              ValueChanged="@(e=>{
                                                    string? convertedValue = e;
                                                    property.SetValue(context.Item,convertedValue);
                                                    CommittedItemChangesHandler(context.Item);
                                                })">
                            </MudTextField>
                        </EditTemplate>
                    </PropertyColumn>
                }
                @if (TypeIdentifier.IsBoolean(property.PropertyType))
                {
                    <PropertyColumn T="T" TProperty="bool?" Property="@(p => (bool?)property.GetValue(p))"
                        IsEditable="@(attributes!.IsEditable)"
                        Sortable="@(attributes.IsSortable)"
                        Hidden="@(attributes.IsHiden)"
                        Title="@(string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title)"
                        Filterable="@(attributes.IsFilterable)">
                        <EditTemplate>
                            <MudSwitch Label="@(isEditFormOpened ? (string.IsNullOrWhiteSpace(attributes.Title)? property.Name : attributes.Title) : string.Empty)"
                           ReadOnly=@(attributes.IsReadOnly) T="bool?"
                           Checked="((bool?)property.GetValue(context.Item))"
                           CheckedChanged="@(e=>{
                                                    bool? convertedValue = (bool?)e.Value;
                                                    property.SetValue(context.Item,convertedValue);
                                                    CommittedItemChangesHandler(context.Item);
                                                })" />
                        </EditTemplate>
                    </PropertyColumn>
                }
            }

            <TemplateColumn Sortable="false" Filterable="false" IsEditable="false">
                <CellTemplate>
                    @if (ShowEditRowButton)
                    {
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                    }
                    @if (ShowDeleteRowButton)
                    {
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(()=>DeleteRowClickHandler(context.Item))" />
                    }

                </CellTemplate>
            </TemplateColumn>
        }
    </Columns>
</MudDataGrid>
@code {

    // Parameters

    [Parameter]
    [EditorRequired]
    public required IList<T> Items { get; set; }

    [Parameter] public bool ReadOnly { get; set; } = false;

    [Parameter] public DataGridEditMode DataGridEditMode { get; set; } = DataGridEditMode.Cell;

    [Parameter] public bool HasSearchbar { get; set; } = false;

    [Parameter] public bool Filterable { get; set; } = false;

    [Parameter] public string HeaderTitle { get; set; } = string.Empty;

    [Parameter] public Func<IList<T>?> GetDifferences { get; set; }

    [Parameter] public bool ShowDeleteRowButton { get; set; } = false;

    [Parameter] public bool ShowEditRowButton { get; set; } = false;

    [Parameter] public bool FixedHeader { get; set; } = false;

    // Properties
    public IList<T> RemovedItems { get; set; } = new List<T>();
    // Fields

    string? _searchString;
    bool dataChanged;
    bool isEditFormOpened;
    bool editFinished;

    MudDataGrid<T> grid;
    List<PropertyInfo>? _propertyInfos;
    T _editingItem;
    DialogOptions dialogOptions = new DialogOptions { CloseButton = false, DisableBackdropClick = true, CloseOnEscapeKey = false };

    // Events

    protected override async Task OnParametersSetAsync()
    {
        if (Items is not null && Items.Count > 0)
        {
            _propertyInfos = GetPropertyInfos(Items.First());

            //LogTypeAttributes();

        }
        await Task.CompletedTask;
    }
    protected override async Task OnInitializedAsync()
    {

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/GenericDataGrid.js");

        if (!firstRender)
        {

        }
    }

    Task OnCheckDataDifferenceHandler(MouseEventArgs e)
    {
        var diffs = GetDifferences();

        dataChanged = diffs?.Count > 0;
        return Task.CompletedTask;
    }

    void CommittedItemChangesHandler(T item)
    {
        dataChanged = true;
        //Console.WriteLine($"{System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void DeleteRowClickHandler(T item)
    {
        Items.Remove(item);
        RemovedItems.Add(item);

        dataChanged = true;
    }

    async Task AddNewItem()
    {
        var item = (T)Activator.CreateInstance(typeof(T))!;

        if (item is not null)
        {
            _editingItem = item;
            isEditFormOpened = true;
            await grid.SetEditingItemAsync(item);

        }
    }

    void OnStartEditingItem(T item)
    {
        editFinished = false;
    }

    void OnCommitedItemChenge(T item)
    {
        Items.Add(item);
        editFinished = true;
        isEditFormOpened = false;
    }

    void OnCanceledEditingItem(T item)
    {
        editFinished = true;
        isEditFormOpened = false;
    }

    void OnFormFieldChanged(FormFieldChangedEventArgs e)
    { }

    //Methods

    Func<T, bool> _quickFilter => x =>
    {
        if (_propertyInfos is null)
            return false;

        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return _propertyInfos?.Where(p =>
                                        {
                                            var attributes = p.GetCustomAttribute<DataGridModelAttribute>();
                                            return attributes is not null && (attributes.IsFilterable && !attributes.IsHiden);
                                        })
                                        .Any(property => ($"{property.GetValue(x)}".Contains(_searchString, StringComparison.OrdinalIgnoreCase))) ?? false;

    };

    private List<PropertyInfo> GetPropertyInfos(T item) =>
        item
            .GetType()
            .GetProperties()
            .ToList();

}
